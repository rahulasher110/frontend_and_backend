
Note :- 3 + undefined => NaN

1) what is function ?

    function is basically used to perform some specific tasks.
    A function is a set of statements enclosed within curly brackets ({}) that take inputs, 
    do the computation, and provide the resultant output. 
    You can call a function multiple times, thereby allowing reusability and modularity in any programming

2)  Strongly typed language

    ● In strongly typed languages you get an error message if the types do not match in an expression.
    E.g. Java and python both are strongly typed languages.
    In python, you get an error if you try to add a number and string:
        a = 10;
        b = 'hello';
        a + b;
    You will get the error at runtime:


3)  Weakly typed language:

    ● In a weakly typed language, there are implicit type conversions. Instead of
    giving you an error, it will convert one of the values automatically and produce
    a result, even if such conversion loses data.

    E.g. JavaScript is a weakly typed language.
        var a = 10;
        var b = 'hello';
        var c = a + b;
        console.log(c);  // 10hello
    Instead of an error, javascript will convert a to string and then concatenate the strings.

4) Purpose of return statements is to stop the execution of a function and return the value

5)  Execution Context

    ● An Execution context is an environment where JavaScript code is executed.
    
    There are two types of Execution context in JavaScript:-
        
        1.) Global Execution Context (GEC):
            ● The Global Execution Context is the default execution Context where all
            javascript code that is not inside of any function.
            
            ● Everything happens in a global execution context.in this phase, memory is
            allocated to all the variables and functions.


            ● There can be only one global execution context in a program.


        2.) Function execution context :
            ● A new execution context is created whenever a function call is encountered.
            ● There can be multiple function execution contexts

6)  Execution Stack:

        ● An execution stack is used to store all the execution contexts which are
        created during the code execution.
        ● An execution stack is also known as a calling stack(LIFO structure) in other
        programming languages.
        ● When the JavaScript engine first encounters JavaScript code, it creates a
        global execution context at the bottom and all the subsequent function
        invocation is pushed to the top of the stack.
        ● The JavaScript engine executes the function whose execution context is at
        the top of the stack. When this function completes, its execution stack is
        popped off from the stack.
        Now first of all Global Execution Context is going to be created.
        ● Then execution starts and the interpreter encounters a call to function a(), and
        here a new execution context is created and pushed on top of Execution
        Stack.
        ● So now the Execution Context for a() is Created interpreter will execute the
        code inside a() line-by-line.
        ● Then the interpreter encounters a call to function b(), this creates another
        Execution Context which is pushed on top of the Execution Stack.
        ● When b() finishes it will be popped off the stack then a() will finish & down to
        Global Execution Context.
